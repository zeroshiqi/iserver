package cn.ichazuo.controller.app;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.util.EntityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

import cn.ichazuo.commons.base.BaseController;
import cn.ichazuo.commons.component.CacheInfo;
import cn.ichazuo.commons.component.ConfigInfo;
import cn.ichazuo.commons.component.RedisClient;
import cn.ichazuo.commons.util.CodeUtils;
import cn.ichazuo.commons.util.DateUtils;
import cn.ichazuo.commons.util.NumberUtils;
import cn.ichazuo.commons.util.StringUtils;
import cn.ichazuo.commons.util.model.Page;
import cn.ichazuo.commons.util.model.Params;
import cn.ichazuo.model.app.OfflineCourseCommentInfo;
import cn.ichazuo.model.app.OfflineCourseInfo;
import cn.ichazuo.model.app.OfflineCourseListInfo;
import cn.ichazuo.model.app.OfflineJoinMember;
import cn.ichazuo.model.app.OfflineSigned;
import cn.ichazuo.model.app.OnlineCourseCommentInfo;
import cn.ichazuo.model.app.OnlineCourseListInfo;
import cn.ichazuo.model.app.UserSimpleInfo;
import cn.ichazuo.model.log.CourseClickLog;
import cn.ichazuo.model.table.CourseOfflineJoin;
import cn.ichazuo.model.table.CourseOnlineJoin;
import cn.ichazuo.model.table.CourseWebInfo;
import cn.ichazuo.model.table.Member;
import cn.ichazuo.model.table.OfflineCourseComment;
import cn.ichazuo.model.table.OfflineCourseCommentFavour;
import cn.ichazuo.model.table.OfflineCourseFavour;
import cn.ichazuo.model.table.OfflineCourseImage;
import cn.ichazuo.model.table.OnlineCourseComment;
import cn.ichazuo.model.table.OnlineCourseFavour;
import cn.ichazuo.model.table.ThirdMember;
import cn.ichazuo.service.CommonService;
import cn.ichazuo.service.CourseService;
import cn.ichazuo.service.LogService;
import cn.ichazuo.service.MemberService;
import cn.ichazuo.service.OrderService;

/**
 * @ClassName: CourseController 
 * @Description: (课程Controller) 
 * @author ZhaoXu
 * @date 2015年7月19日 下午12:09:28 
 * @version V1.0
 */
@RequestMapping("/app")
@Controller("app.courseController")
public class CourseController extends BaseController{
	@Autowired
	private CourseService courseService;
	@Autowired
	private CommonService commonService;
	@Autowired
	private MemberService memberService;
	@Autowired
	private OrderService orderService;
	@Autowired
	private LogService logService;
	@Autowired
	private CacheInfo cacheInfo;
	@Autowired
	private ConfigInfo configInfo;
	@Autowired
	private RedisClient redisClient;
	
	private static final int index = 1;
	public static final String msg = "【插坐学院】#name#同学，课程马上就要开始啦，请抓紧时间签到入场。入场后将手机调至静音，全心投入插坐学院精彩课程哦！回复TD退订";
	
	
	@ResponseBody
	@RequestMapping("/findOfflineCourseV2ForWeb")
	public JSONObject findOfflineCourseV2ForWeb(String time,Page page,Long userId,Long courseType,Integer newtype){
		try{
			if(NumberUtils.isNullOrZero(newtype)){
				newtype = 0;
			}
			LocalDate now = LocalDate.now();
//			String countKey = "findOfflineCourseV2ForWeb";
//			String key = "findOfflineCourseV2ForWeb---page:"+page.getNowPage()+"--time--"+time;
//			long start = System.currentTimeMillis();
			
			List<OfflineCourseListInfo> offlineList = null;
//			if(redisClient.isExist(key)){
//				offlineList = (List<OfflineCourseListInfo>)redisClient.getObject(key);
//			}else{
				offlineList = courseService.findOfflineCourseListV2(time,page,courseType,1,newtype);
//				redisClient.setObject(key, offlineList, cacheInfo.getRedisCacheLevel3());
//			}
			
			offlineList.forEach(offline -> {
				String teachers = "";
				String id = offline.getTeacherIds();
				String arr[] = id.split(",");
				
				for(int i=0;i<arr.length;i++){
					Member m = memberService.findMemberById(Long.valueOf(arr[i]));
					if(m != null){
						teachers += m.getNickName();
						teachers += ",";
					}
					if(i == index){
						teachers = StringUtils.removeEndChar(teachers, ',');
						if(arr.length > index){
							teachers += "等";
						}
						break;
					}
				}
				offline.setTeachers(StringUtils.removeEndChar(teachers, ','));
				//添加报名人数
				offline.setJoinNum(courseService.findCourseJoinCount(offline.getId()));
				LocalDate begin = LocalDate.parse(DateUtils.formatDate(offline.getBeginTime(),DateUtils.DATE_FORMAT_NORMAL));
				if(now.isAfter(begin) || now.isEqual(begin) || offline.getJoinNum() >= offline.getStudentNum()){
					//报名时间截止,报名人数已经足够  停止报名  
					offline.setIsOver(1);
				}else{
					offline.setIsOver(0);
				}
				
				if(offline.getId() == 129){
					offline.setIsOver(1);
				}
			});
			
			Long count = 0L;
//			if(redisClient.isExist(countKey)){
//				count = (Long)redisClient.getObject(countKey);
//			}else{
				count = courseService.findOfflineCourseCount(courseType);
//				redisClient.setObject(countKey, count,cacheInfo.getRedisCacheLevel3());
//			}
			
			if(!NumberUtils.isNullOrZero(courseType)){
				return ok("查询成功",offlineList,page.getNowPage(),count);
			}else{
				return ok("查询成功",offlineList,count);
			}
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: findOfflineCourse 
	 * @Description: (查询线下课程列表) 
	 * @param page 页数
	 * @param userId 当前登录用户
	 * @param courseType 线下课程类别
	 * @param time 时间
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/findOfflineCourseV2")
	public JSONObject findOfflineCourseV2(String time,Page page,Long userId,Long courseType,Integer newtype){
		try{
			if(NumberUtils.isNullOrZero(newtype)){
				newtype = 0;
			}
			LocalDate now = LocalDate.now();
			
			List<OfflineCourseListInfo> offlineList = null;
				offlineList = courseService.findOfflineCourseListV2(time,page,courseType,0,newtype);
			
			offlineList.forEach(offline -> {
				
				String teachers = "";
				String id = offline.getTeacherIds();
				String arr[] = id.split(",");
				for(int i=0;i<arr.length;i++){
					Member m = memberService.findMemberById(Long.valueOf(arr[i]));
					if(m != null){
						teachers += m.getNickName();
						teachers += ",";
					}
					if(i == index){
						teachers = StringUtils.removeEndChar(teachers, ',');
						if(arr.length > index){
							teachers += "等";
						}
						break;
					}
				}
				offline.setTeachers(StringUtils.removeEndChar(teachers, ','));
				
				if(NumberUtils.isNullOrZero(userId)){
					offline.setIsFavour(0);
				}else{
					//设置是否点赞过
					OfflineCourseFavour favour  = courseService.findCourseFavourInfo(offline.getId(), userId);
					offline.setIsFavour(favour == null || favour.getStatus() == 0 ? 0 : 1);
				}
				int	userCount = courseService.findOfflineCourseFavourCount(offline.getId());
				offline.setUserCount(userCount);
				
				List<UserSimpleInfo> simpleList = courseService.findCourseFavourListByOfflineId(offline.getId());
				//添加报名人数
				offline.setJoinNum(courseService.findCourseJoinCount(offline.getId()));
				//添加点赞用户列表
				offline.setUserList(simpleList);
				
				
				LocalDate begin = LocalDate.parse(DateUtils.formatDate(offline.getBeginTime(),DateUtils.DATE_FORMAT_NORMAL));
				if(now.isAfter(begin) || now.isEqual(begin) || offline.getJoinNum() >= offline.getStudentNum()){
					//报名时间截止,报名人数已经足够  停止报名  
					offline.setIsOver(1);
				}else{
					offline.setIsOver(0);
				}
				
				if(offline.getId() == 129){
					offline.setIsOver(1);
				}
			});
			
			Long count = 0L;
				count = courseService.findOfflineCourseCount( courseType);
			
			
			// 获取结束时间
			if(!NumberUtils.isNullOrZero(courseType)){
				return ok("查询成功",offlineList,page.getNowPage(),count);
			}else{
				return ok("查询成功",offlineList,count);
			}
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: findOfflineCourseListInfo 
	 * @Description: (查询课程列表中得单条信息) 
	 * @param courseId 课程ID
	 * @param userId 用户id
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/findOfflineCourseListInfo")
	public JSONObject findCourseListInfo(Long courseId,Long userId){
		try{
			if(NumberUtils.isNullOrZero(courseId)){
				return error("参数缺失");
			}
			OfflineCourseListInfo info = courseService.findOfflineCourseListInfoByCourseId(courseId);
			if(info == null){
				return error("参数错误");
			}
			if(NumberUtils.isNullOrZero(userId)){
				info.setIsFavour(0);
			}else{
				//设置是否点赞过
				OfflineCourseFavour favour = courseService.findCourseFavourInfo(courseId, userId);
				if(favour == null || favour.getStatus() == 0){
					info.setIsFavour(0);
				}else{
					info.setIsFavour(1);
				}
			}
			info.setUserCount(courseService.findOfflineCourseFavourCount(info.getId()));
			
			//添加点赞用户列表
			List<UserSimpleInfo> simpleList = courseService.findCourseFavourListByOfflineId(info.getId());
			info.setUserList(simpleList);
			
			//添加报名人数
			info.setJoinNum(courseService.findCourseJoinCount(info.getId()));
			
			return ok("查询成功",info);
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: findOfflineCourseInfo 
	 * @Description: (查询课程信息) 
	 * @param courseId 课程ID
	 * @param userId 用户id
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/findOfflineCourseInfo")
	public JSONObject findOfflineCourseInfo(Long courseId,Long userId){
		try{
			if(NumberUtils.isNullOrZero(courseId)){
				return error("参数缺失");
			}
			OfflineCourseInfo offline = courseService.findOfflineCourseAllInfo(courseId);
			if(offline == null){
				return error("参数错误");
			}
			
			//设置图片
			List<OfflineCourseImage> images = courseService.findOfflineCourseImages(courseId);
			List<String> imageList = new ArrayList<>();
			if(images == null || images.isEmpty()){
				imageList.add(commonService.appenUrl("/") + configInfo.getCourseDefaultImage());
			}else{
				images.forEach(image -> {
					imageList.add(image.getImageUrl());
				});
			}
			//设置返回信息
			if(NumberUtils.isNullOrZero(userId)){
				offline.setIsFavour(0);
			}else{
				//设置是否点赞过
				OfflineCourseFavour favour = courseService.findCourseFavourInfo(courseId, userId);
				offline.setIsFavour(favour == null || favour.getStatus() == 0 ? 0 : 1);
			}
			List<UserSimpleInfo> favourList = courseService.findCourseFavourListByOfflineId(courseId);
			//添加报名人数
			offline.setJoinNum(courseService.findCourseJoinCount(offline.getId()));
			//添加点赞用户列表
			offline.setUserList(favourList);
			offline.setImages(imageList);
			
			LocalDate now = LocalDate.now();
			LocalDate begin = LocalDate.parse(DateUtils.formatDate(offline.getBeginTime(),DateUtils.DATE_FORMAT_NORMAL));
			if(now.isAfter(begin) || offline.getJoinNum() >= offline.getStudentNum()){
				//报名时间截止,报名人数已经足够  停止报名  
				offline.setIsComment(0);
			}else{
				if(NumberUtils.isNullOrZero(userId)){
					offline.setIsComment(1);
				}else{
					//查询user是否报过名
					CourseOfflineJoin join = courseService.findCourseJoinInfo(offline.getId(),userId);
					//报过名就显示评论
					offline.setIsComment(join == null ? 1 : 0);
				}
			}
			
			List<UserSimpleInfo> teacherList = new ArrayList<>();
			try{
				String[] arr = offline.getIds().split(",");
				for(String s : arr){
					UserSimpleInfo info = memberService.findSimpleMemberInfo(Long.valueOf(s));
					if(info == null){
						continue;
					}
					teacherList.add(info);
				}
			}catch(Exception e){
				teacherList = new ArrayList<>();
			}
			
			offline.setFavourCount(courseService.findOfflineCourseFavourCount(offline.getId()));
			offline.setTeacherList(teacherList);
			return ok("查询成功",offline);
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: findOfflineCourseJoinUser 
	 * @Description: (查询线下课程报名用户) 
	 * @param courseId 课程ID
	 * @param page 分页
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/findOfflineCourseJoinUser")
	public JSONObject findOfflineCourseJoinUser(Long courseId,Page page){
		try{
			if(NumberUtils.isNullOrZero(courseId)){
				return error("参数缺失");
			}
			//查询参加用户列表
			List<UserSimpleInfo> joinList = courseService.findCourseJoinList(page, courseId);
			int count = courseService.findCourseJoinCount(courseId);
			return ok("查询成功",joinList,page.getNowPage(),count);
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: findOfflineCourseComment 
	 * @Description: (查询线下课程评论列表) 
	 * @param otherId 课程ID
	 * @param userId 用户id
	 * @param page 分页
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/findOfflineCourseComment")
	public JSONObject findOfflineCourseComment(Long otherId,Long userId,Page page){
		try{
			if(NumberUtils.isNullOrZero(otherId)){
				return error("参数缺失");
			}
			List<OfflineCourseCommentInfo> infoList = courseService.findCourseCommentByCourseId(otherId);
			infoList.forEach(info -> {
				if(NumberUtils.isNullOrZero(userId)){
					info.setIsAgree(0);
				}else{
					//设置是否赞过
					info.setIsAgree(courseService.findCommentFavour(info.getId(), userId) == null ? 0 : 1);
				}
				//设置评论点赞数量
				info.setAgree(courseService.findCommentFavourCount(info.getId()));
			});
			return ok("查询成功",infoList);
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: updateCommentFavour 
	 * @Description: (线下课程评论点赞) 
	 * @param commentId  评论ID
	 * @param userId	用户ID
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/updateCommentFavour")
	public JSONObject updateCommentFavour(Long commentId,Long userId){
		try{
			if(NumberUtils.isNullOrZero(commentId) || NumberUtils.isNullOrZero(userId) ){
				return error("参数缺失");
			}
			
			OfflineCourseCommentFavour favour = courseService.findCommentFavour(commentId, userId);
			if(favour == null){
				Member member = memberService.findMemberById(userId);
				if(member == null){
					return error("参数错误");
				}
				favour = new OfflineCourseCommentFavour();
				favour.setCommentId(commentId);
				favour.setMemberId(userId);
				if(courseService.saveCommentFavour(favour)){
					return ok("操作成功");
				}
			}else{
				favour.setStatus(favour.getStatus() == 0 ? 1 : 0);
				if(courseService.updateCommentFavour(favour)){
					return ok("操作成功");
				}
			}
			return error("操作失败");
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: updateCourseFavour 
	 * @Description: (线下课程点赞) 
	 * @param courseId 课程ID
	 * @param userId 用户id
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/updateCourseFavour")
	public JSONObject updateCourseFavour(Long courseId,Long userId){
		try{
			if(NumberUtils.isNullOrZero(courseId) || NumberUtils.isNullOrZero(userId)){
				return error("参数缺失");
			}
			OfflineCourseFavour favour = courseService.findCourseFavourInfo(courseId, userId);
			if(favour == null){
				Member member = memberService.findMemberById(userId);
				if(member == null){
					return error("参数错误");
				}
				favour = new OfflineCourseFavour();
				favour.setCourseId(courseId);
				favour.setMemberId(userId);
				if(courseService.saveCourseFavour(favour)){
					return ok("操作成功");
				}
			}else{
				favour.setStatus(favour.getStatus() == 1 ? 0 : 1);
				if(courseService.updateCourseFavour(favour)){
					return ok("操作成功");
				}
			}
			return error("操作失败");
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: saveOfflineComment 
	 * @Description: (保存评论) 
	 * @param userId 用户id
	 * @param courseId 课程ID
	 * @param star 评分
	 * @param anonymous 是否匿名 0:不匿名 1:匿名
	 * @param content 内容
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/saveOfflineComment")
	public JSONObject saveOfflineComment(Long userId,Long courseId,Double star,Integer anonymous,String content){
		try{
			if(NumberUtils.isNullOrZero(userId) || NumberUtils.isNullOrZero(courseId) || NumberUtils.isNullOrZero(star) || anonymous == null){
				return error("参数缺失");
			}
			Member member = memberService.findMemberById(userId);
			if(member == null){
				return error("参数错误");
			}
			if(StringUtils.isNullOrEmpty(content)){
				content = null;
			}
			OfflineCourseComment comment = new OfflineCourseComment();
			comment.setAnonymous(anonymous);
			comment.setContent(content);
			comment.setCourseId(courseId);
			comment.setMemberId(userId);
			comment.setNickName(anonymous == 1 ? commonService.getRandomNickName(userId) : member.getNickName());
			comment.setStar(star);
			if(courseService.saveOfflineCourseComment(comment)){
				return ok("保存成功");
			}
			return error("保存失败");
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: findOfflineCourseContent 
	 * @Description: (查询线下课程简介) 
	 * @param courseId
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/findOfflineCourseContent")
	public JSONObject findOfflineCourseContent(Long courseId){
		try{
			if(NumberUtils.isNullOrZero(courseId)){
				return error("参数缺失");
			}
			String info = courseService.findOfflineCourseInfo(courseId);
			return ok("查询成功",info+css);
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: findOnlineCourseByCourseId 
	 * @Description: (根据课程ID查询线上课程信息) 
	 * @param courseId
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/findOnlineCourseByCourseId")
	public JSONObject findOnlineCourseByCourseId(Long courseId){
		try{
			if(NumberUtils.isNullOrZero(courseId)){
				return error("参数错误");
			}
			OnlineCourseListInfo info = courseService.findOnlineCourseInfoByCourseId(courseId);
			CourseWebInfo web = commonService.findCourseWebInfo(info.getId());
			if(web != null){
				info.setUrl(web.getUrl());
				info.setNumber(web.getNumber());
			}
			
			info.setWeek(DateUtils.getWeekOfDate(info.getPlayStartTime()));
			
//			if(info.getType() == 2){
//				info.setPlayAddress("");
//			}
			return ok("查询成功",info);
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: updateOnlineCourseFavour 
	 * @Description: (线上课程点赞) 
	 * @param courseId 课程id
	 * @param userId 用户id
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/updateOnlineCourseFavour")
	public JSONObject updateOnlineCourseFavour(Long courseId,Long userId){
		try{
			if(NumberUtils.isNullOrZero(userId) || NumberUtils.isNullOrZero(courseId)){
				return error("参数错误");
			}
			OnlineCourseFavour favour = courseService.findOnlineCourseFavour(courseId, userId);
			if(favour == null){
				favour = new OnlineCourseFavour();
				favour.setCourseId(courseId);
				favour.setMemberId(userId);
				courseService.saveOnlineCourseFavour(favour);
			}else{
				favour.setStatus(favour.getStatus() == 0 ? 1 : 0);
				courseService.updateOnlineCourseFavour(favour);
			}
			return ok();
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: findOnlineCourseList 
	 * @Description: (查询线上课程列表) 
	 * @param time 时间
	 * @param type 类别 1:正在直播  2:预告 3:点播
	 * @param userId 用户id
	 * @return
	 */
	@Deprecated
	@ResponseBody
	@RequestMapping("/findOnlineCourseList")
	public JSONObject findOnlineCourseList(String time,Integer type,Long userId,Integer from){
		try{
			if(NumberUtils.isNullOrZero(type)){
				type = 1;
			}
			if(from == null){
				from = 1;
			}
			ThirdMember third = memberService.findThirdMemberByMemberId(userId);
			
			List<OnlineCourseListInfo> onlineList  = new ArrayList<>();
			List<OnlineCourseListInfo> infoList = courseService.findOnlineCourseList(time, type,from);
			infoList.forEach(info -> {
				info.setUserCount(courseService.findOnlineCourseFavourCount(info.getId()));
				info.setUserList(courseService.findOnlineJoinMemberLimit10(info.getId()));
				
				if(!configInfo.getProjectTest()){
					info.setShareUrl("http://www.chazuomba.com/files/courseWeb/offline.html");
					info.setHtmlUrl("http://www.chazuomba.com/files/courseWeb/onlineShow.html?courseId="+info.getId());
				}else{
					info.setShareUrl("http://www.chazuomba.com/files/hehe/offline.html");
					info.setHtmlUrl("http://www.chazuomba.com/files/hehe/onlineShow.html?courseId="+info.getId());
				}
				
				
				CourseWebInfo web = commonService.findCourseWebInfo(info.getId());
				if(web != null){
					info.setUrl(web.getUrl());
					info.setNumber(web.getNumber());
				}
				
				if(third == null){
					info.setIsBuy("false");
				}else if(StringUtils.isNullOrEmpty(third.getUnionid())){
					info.setIsBuy("false");
				}else{
					int count = orderService.findOnlineCourseBugCount(info.getId(), third.getUnionid());
					if(count == 0){
						info.setIsBuy("false");
					}else{
						info.setIsBuy("true");
					}
				}
				
				info.setWeek(DateUtils.getWeekOfDate(info.getPlayStartTime()));
				
				if(StringUtils.isNullOrEmpty( info.getPlayAddress())){
					info.setPlayAddress("http://www.chazuomba.com/files/courseFile/2015-07-29/28eeaefc34304f53915318498dfdddf9.mp3");
				}
				
				//判断是否点赞
				OnlineCourseFavour favour = courseService.findOnlineCourseFavour(info.getId(), userId);
				if(favour == null || favour.getStatus() == 0){
					info.setIsFavour("false");
				}else{
					info.setIsFavour("true");
				}
				info.setType(3);
				
				onlineList.add(info);
			});
			Long count = courseService.findOnlineCourseCount();
			return ok("查询成功",onlineList,count);
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	@ResponseBody
	@RequestMapping("/findOnlineCourseListV2")
	public JSONObject findOnlineCourseListV2(Page page){
		try{
			List<OnlineCourseListInfo> list = courseService.findOnlineCourseListV2(page.getNowPage());
			
			return ok("查询成功",list,page.getNowPage(),courseService.findOnlineCourseCountV2());
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: joinOnlineCourse 
	 * @Description: (参加/离开线上课程) 
	 * @param userId
	 * @param courseId
	 * @param type
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/joinOnlineCourse")
	public JSONObject joinOnlineCourse(Long userId,Long courseId,Integer type){
		try{
			if(NumberUtils.isNullOrZero(userId) || NumberUtils.isNullOrZero(courseId) || type == null){
				return error("参数缺失");
			}
			Params params = new Params();
			params.putData("memberId", userId);
			params.putData("courseId", courseId);
			
			CourseOnlineJoin join = courseService.findCourseOnlineJoinInfo(params);
			if(join == null && type == 1){
				join = new CourseOnlineJoin();
				join.setCourseId(courseId);
				join.setMemberId(userId);
				if(courseService.saveCourseOnlineInfo(join)){
					return ok("操作成功");
				}
			}else{
				if(type == 0 && join == null){
					return ok("操作成功");
				}
				if(join.getStatus() == type){
					return ok("操作成功");
				}
				join.setStatus(type);
				if(courseService.updateCourseOnlineInfoStatus(join)){
					return ok("操作成功");
				}
			}
			return error("操作失败");
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: saveOnlineComment 
	 * @Description: (保存线上课程评论) 
	 * @param userId 用户id
	 * @param courseId 课程id
	 * @param content 评论内容
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/saveOnlineComment")
	public JSONObject saveOnlineComment(Long userId,Long courseId,String content){
		try{
			if(NumberUtils.isNullOrZero(courseId) || userId == null || content == null){
				return error("参数缺失");
			}
			OnlineCourseComment comment = new OnlineCourseComment();
			Member member = memberService.findMemberById(userId);
			if(member == null){
				comment.setMemberId(0L);
				comment.setNickName(commonService.getRandomNickName(Long.valueOf(CodeUtils.getRandomInt(20))));
				comment.setAvatar(commonService.getRandomAvatar());
			}else{
				comment.setMemberId(userId);
				comment.setNickName(member.getNickName());
				comment.setAvatar(member.getAvatar());
			}
			comment.setContent(content);
			comment.setCourseId(courseId);
			
			
			if(courseService.saveOnlineCourseComment(comment)){
				String key = cacheInfo.getCacheOnlineCommentCount() + "courseId--"+courseId;
				super.deleteCache(redisClient, key);
				return ok("保存成功");
			}
			
			return error("保存失败");
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: findOnlineComment 
	 * @Description: (查询线上课程评论列表 ) 
	 * @param courseId 课程ID
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/findOnlineComment")
	public JSONObject findOnlineComment(Long courseId,String time){
		try{
			if(NumberUtils.isNullOrZero(courseId)){
				return error("参数缺失");
			}
			if(StringUtils.isNullOrEmpty(time)){
				time = DateUtils.formatDate(DateUtils.getNowDate());
			}
			Params params = new Params();
			params.putData("time", time);
			params.putData("courseId", courseId);
			List<OnlineCourseCommentInfo> infoList = courseService.findOnlineCommentList(params);
			return ok("查询成功",infoList);
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	
	/**
	 * @Title: findOnlineCommentCount 
	 * @Description: (查询线上课程评论数量) 
	 * @param courseId 课程ID
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/findOnlineCommentCount")
	public JSONObject findOnlineCommentCount(Long courseId){
		try{
			if(NumberUtils.isNullOrZero(courseId)){
				return error("参数缺失");
			}
			Integer count = 0;
			String key = cacheInfo.getCacheOnlineCommentCount() + "courseId--"+courseId;
			if(redisClient.isExist(key)){
				count = (Integer)redisClient.getObject(key);
			}else{
				Params params = new Params();
				params.putData("courseId", courseId);
				count = courseService.findOnlineCommentCount(params);
				redisClient.setObject(key, count, cacheInfo.getRedisCacheLevel4());
			}
			return ok("查询成功",count);
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: findOnlineCourseContent 
	 * @Description: (查询线上课程内容)
	 * @param courseId
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/findOnlineCourseContent")
	public JSONObject findOnlineCourseContent(Long courseId,Integer type){
		try{
			if(NumberUtils.isNullOrZero(courseId)){
				return error("参数缺失");
			}
			String info = courseService.findOnlineCourseContent(courseId);
			if(NumberUtils.isNullOrZero(type)){
				return ok("ok",info+css);
			}else{
				return ok("ok",info);
			}
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: findOnlinJoinMember 
	 * @Description: (查询房间在线用户) 
	 * @param courseId
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/findOnlinJoinMember")
	public JSONObject findOnlinJoinMember(Long courseId){
		try{
			
			if(NumberUtils.isNullOrZero(courseId)){
				return error("参数缺失");
			}
			Params params = new Params();
			params.putData("courseId", courseId);
			
			List<UserSimpleInfo> infoList = courseService.findOnlineJoinMember(params);
			Long count = courseService.findOnlineJoinNumber(courseId);
			return ok("查询成功",infoList,count);
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: updateAppClickNumber 
	 * @Description: (修改客户端课程点击数量) 
	 * @param courseId 课程ID
	 * @param userId 用户ID
	 * @param request
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/updateAppClickNumber")
	public JSONObject updateAppClickNumber(Long courseId,Long userId,HttpServletRequest request){
		try{
			if(NumberUtils.isNullOrZero(courseId)){
				return error("参数错误");
			}
			if(NumberUtils.isNullOrZero(userId)){
				userId = 0L;
			}
			String ipAddress = request.getRemoteAddr();
			courseService.updateAppCourseClickNumber(courseId);
			
			//保存点击日志
			CourseClickLog log = new CourseClickLog();
			log.setCourseId(courseId);
			log.setCreateAt(DateUtils.getNowDate());
			log.setIpAddress(ipAddress);
			log.setType(1);
			log.setMemberId(userId);
			
			logService.saveCourseClickLog(log);
			return ok("ok");
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: findOfflineCourse 
	 * @Description: (查询线下课程列表) 
	 * @param page 页数
	 * @param type 类别 0:最新课程  1:热门课程
	 * @param searchName 搜索
	 * @param userId 当前登录用户
	 * @param courseType 线下课程类别
	 * @param number 条数
	 * @return
	 */
	@Deprecated
	@ResponseBody
	@RequestMapping("/findOfflineCourse")
	public JSONObject findOfflineCourse(Page page,Integer type,String searchName,Long userId,Long courseType,Integer number){
		try{
			if(NumberUtils.isNullOrZero(type)){
				type = 0;
			}
			List<OfflineCourseListInfo> offlineList = courseService.findOfflineCourseList(page, type == 0, searchName, courseType,number);
			offlineList.forEach(offline -> {
				if(NumberUtils.isNullOrZero(userId)){
					offline.setIsFavour(0);
				}else{
					//设置是否点赞过
					OfflineCourseFavour favour  = courseService.findCourseFavourInfo(offline.getId(), userId);
					offline.setIsFavour(favour == null || favour.getStatus() == 0 ? 0 : 1);
				}
				
				offline.setUserCount(courseService.findOfflineCourseFavourCount(offline.getId()));
				List<UserSimpleInfo> simpleList = courseService.findCourseFavourListByOfflineId(offline.getId());
				//添加报名人数
				offline.setJoinNum(courseService.findCourseJoinCount(offline.getId()));
				//添加点赞用户列表
				offline.setUserList(simpleList);
			});
			
			Integer count = courseService.findOfflineCourseCount(searchName, courseType);
			return ok("查询成功",offlineList,page.getNowPage(),count);
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	
	@ResponseBody
	@RequestMapping("/findOfflineCourseV2ForSigned")
	public JSONObject findOfflineCourseV2ForSigned(){
		try{
			LocalDate now = LocalDate.now();
			List<OfflineCourseListInfo> offlineList = null;
			offlineList = courseService.findOfflineCourseV2ForSigned();
			offlineList.forEach(offline -> {
				String teachers = "";
				String id = offline.getTeacherIds();
				String arr[] = id.split(",");
				
				for(int i=0;i<arr.length;i++){
					Member m = memberService.findMemberById(Long.valueOf(arr[i]));
					if(m != null){
						teachers += m.getNickName();
						teachers += ",";
					}
					if(i == index){
						teachers = StringUtils.removeEndChar(teachers, ',');
						if(arr.length > index){
							teachers += "等";
						}
						break;
					}
				}
				offline.setTeachers(StringUtils.removeEndChar(teachers, ','));
				//添加报名人数
				offline.setJoinNum(courseService.findCourseJoinCount(offline.getId()));
				LocalDate begin = LocalDate.parse(DateUtils.formatDate(offline.getBeginTime(),DateUtils.DATE_FORMAT_NORMAL));
			});
			
			Long count = 0L;
			return ok("查询成功",offlineList);
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	/**
	 * @Title: saveSignedInfo
	 * @Description: (保存签到信息) 
	 * @param mobile 用户id
	 * @param courseId 课程ID
	 * @param courseName 课程名称
	 * @param createAt 签到时间
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/saveSignedInfo")
	public JSONObject saveSignedInfo(String mobile,Long courseId,String courseName,String createAt){
		try{
			if(mobile==null || NumberUtils.isNullOrZero(courseId) || courseName==null || createAt == null){
				return error("参数缺失");
			}
			Date date = new Date();
		    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");  
			DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
			DateFormat fmt1 = new SimpleDateFormat("yyyy-MM-dd HH:mm");
			String sign = fmt.format(date)+" 12:00";
			String now=fmt1.format(date);
			List<OfflineJoinMember> list = new ArrayList<OfflineJoinMember>();
			List<OfflineSigned> signedList = new ArrayList<OfflineSigned>();
			//查询手机号在课程下是否报过名
			//判断mobile的位数，4位为模糊查询，12位为精准查询
			if(mobile.length()==4){
				list = courseService.findOfflineJoinForSigned(mobile,courseId);
				if(list== null || list.size()==0){
					return status(500,"没有报名信息");
				}else if(list.size()== 1){
					if(courseService.findSignedListByMobile(mobile,courseId)==null || courseService.findSignedListByMobile(mobile,courseId)==""){
						//查询详细手机号
						String lmobile=courseService.findOfflineJoinMobileForSigned(mobile,courseId);
						//查询姓名
						String name=courseService.findOfflineJoinNameForSigned(mobile,courseId);
						//将报名数据存入数据库
						OfflineSigned offlinesigned = new OfflineSigned();
						offlinesigned.setMobile(lmobile);
						offlinesigned.setName(name);
						offlinesigned.setCourseId(courseId);
						offlinesigned.setCourseName(courseName);
						offlinesigned.setCreateAt(createAt);
						if(courseService.saveOfflineSignedInfo(offlinesigned)){
							return status(200,"签到成功",list);
						}
					}else{
						String lastDate = fmt1.format(sdf.parse(courseService.findSignedListByMobile(mobile,courseId)));
						if(sdf.parse(now).after(sdf.parse(sign)) && sdf.parse(lastDate).after(sdf.parse(sign))){ 
							//起始日期大于结束日期 
							return status(300,"下午只能签到一次");
						}else if(sdf.parse(sign).after(sdf.parse(now)) && sdf.parse(sign).after(sdf.parse(lastDate))){ 
							//起始日期大于结束日期 
							return status(600,"上午只能签到一次");
						}else{
							//查询详细手机号
							String lmobile=courseService.findOfflineJoinMobileForSigned(mobile,courseId);
							//查询姓名
							String name=courseService.findOfflineJoinNameForSigned(mobile,courseId);
							//将报名数据存入数据库
							OfflineSigned offlinesigned = new OfflineSigned();
							offlinesigned.setMobile(lmobile);
							offlinesigned.setCourseId(courseId);
							offlinesigned.setCourseName(courseName);
							offlinesigned.setCreateAt(createAt);
							offlinesigned.setName(name);
							if(courseService.saveOfflineSignedInfo(offlinesigned)){
								return status(200,"签到成功",list);
							}
						}
					}
				}else{
					return status(400,"此手机号码报名信息有重复");
				}
			}else{
				list = courseService.findOfflineJoinForSignedAll(mobile,courseId);
				if(list== null || list.size()==0){
					return status(500,"没有报名信息");
				}else if(list.size()== 1){
					if(courseService.findSignedListByMobileAll(mobile,courseId)==null || courseService.findSignedListByMobileAll(mobile,courseId)==""){
						//查询姓名
						String name=courseService.findOfflineJoinNameForSignedAll(mobile,courseId);
						//将报名数据存入数据库
						OfflineSigned offlinesigned = new OfflineSigned();
						offlinesigned.setMobile(mobile);
						offlinesigned.setName(name);
						offlinesigned.setCourseId(courseId);
						offlinesigned.setCourseName(courseName);
						offlinesigned.setCreateAt(createAt);
						if(courseService.saveOfflineSignedInfo(offlinesigned)){
							return status(200,"签到成功",list);
						}
					}else{
						String lastDate = fmt1.format(sdf.parse(courseService.findSignedListByMobileAll(mobile,courseId).toString()));
						if(sdf.parse(now).after(sdf.parse(sign)) && sdf.parse(lastDate).after(sdf.parse(sign))){ 
							//起始日期大于结束日期 
							return status(300,"下午只能签到一次");
						}else if(sdf.parse(sign).after(sdf.parse(now)) && sdf.parse(sign).after(sdf.parse(lastDate))){ 
							//起始日期大于结束日期 
							return status(600,"上午只能签到一次");
						}else{
							//查询姓名
							String name=courseService.findOfflineJoinNameForSignedAll(mobile,courseId);
							//将报名数据存入数据库
							OfflineSigned offlinesigned = new OfflineSigned();
							offlinesigned.setMobile(mobile);
							offlinesigned.setName(name);
							offlinesigned.setCourseId(courseId);
							offlinesigned.setCourseName(courseName);
							offlinesigned.setCreateAt(createAt);
							if(courseService.saveOfflineSignedInfo(offlinesigned)){
								return status(200,"签到成功",list);
						}
					}
					}
				}else{
					return status(400,"此手机号码报名信息有重复");
				}
			}
			return error(APP_SYSTEM_ERROR);
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	@ResponseBody
	@RequestMapping("/findOfflineSignedJoin")
	public JSONObject findOfflineSignedJoin(Long courseId){
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");  
		DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
		DateFormat fmt1 = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		String sign = fmt.format(date)+" 12:00";
		String now=fmt1.format(date);
		try{
			List<OfflineSigned> signedList = null;
			if(sdf.parse(sign).after(sdf.parse(now))){
				signedList = courseService.findOfflineSignedJoinListShang(courseId,sign);
				return ok("查询成功",signedList);
			}else{
				signedList = courseService.findOfflineSignedJoinListXia(courseId,sign);
				return ok("查询成功",signedList);
			}
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	@ResponseBody
	@RequestMapping("/findOfflineNotSignedList")
	public JSONObject findOfflineNotSignedList(Long courseId){
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");  
		DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
		DateFormat fmt1 = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		String sign = fmt.format(date)+" 12:00";
		String now=fmt1.format(date); 
		try{
			List signedMobileList = new ArrayList();
			List<OfflineJoinMember> notSignList = new ArrayList();
			//判断时间段是上午还是下午
			if(sdf.parse(sign).after(sdf.parse(now))){
				signedMobileList = courseService.findOfflineSignedMobileListShang(courseId,sign);
				if(signedMobileList.size()==0){
					notSignList = courseService.findOfflineNotSignedList(courseId);
				}else{
					notSignList = courseService.findOfflineNotSignedMobileList(courseId,sign);
				}
				return ok("查询成功",notSignList);
			}else{
				signedMobileList = courseService.findOfflineSignedMobileListXia(courseId,sign);
				if(signedMobileList.size()==0){
					notSignList=courseService.findOfflineNotSignedList(courseId);
				}else{
					notSignList = courseService.findOfflineNotSignedMobileList(courseId,sign);
				}
				return ok("查询成功",notSignList);
			}
			
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
	
	@ResponseBody
	@RequestMapping("/offlineNotSignedSendMessage")
	public JSONObject offlineNotSignedSendMessage(Long courseId){
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");  
		DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
		DateFormat fmt1 = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		String sign = fmt.format(date)+" 12:00";
		String now=fmt1.format(date); 
		//创蓝短信
		ChuanglanSMS client = new ChuanglanSMS("M3667756","0927196a");
		CloseableHttpResponse response = null;
		StringBuffer errStr = new StringBuffer();
		try{
			List signedMobileList = new ArrayList();
			List<OfflineJoinMember> notSignList = new ArrayList();
			String result = "";
			//判断时间段是上午还是下午
			if(sdf.parse(sign).after(sdf.parse(now))){
				signedMobileList = courseService.findOfflineSignedMobileListShang(courseId,sign);
				if(signedMobileList.size()==0){
					notSignList = courseService.findOfflineNotSignedList(courseId);
					for(OfflineJoinMember member:notSignList){
						//发送短信
						response = client.sendMessage(member.getMobile(),msg.replace("#name#", member.getNickName()));
						String a = EntityUtils.toString(response.getEntity());
						org.json.JSONObject jsObject = new org.json.JSONObject(a);
						Map<String, Object> jsonMap = (Map<String, Object>) JSON.parse(jsObject.toString());
						if(!(jsonMap.get("success").toString().equals("true") || jsonMap.get("success").toString()=="true")){
							errStr.append(member.getMobile()).append(",");
						}
					}
				}else{
					notSignList = courseService.findOfflineNotSignedMobileList(courseId,sign);
					for(OfflineJoinMember member:notSignList){
						//发送短信
						response = client.sendMessage(member.getMobile(),msg.replace("#name#", member.getNickName()));
						String a = EntityUtils.toString(response.getEntity());
						org.json.JSONObject jsObject = new org.json.JSONObject(a);
						Map<String, Object> jsonMap = (Map<String, Object>) JSON.parse(jsObject.toString());
						if(!(jsonMap.get("success").toString().equals("true") || jsonMap.get("success").toString()=="true")){
							errStr.append(member.getMobile()).append(",");
						}
					}
				}
				return status(200,errStr.toString());
			}else{
				signedMobileList = courseService.findOfflineSignedMobileListXia(courseId,sign);
				if(signedMobileList.size()==0){
					notSignList=courseService.findOfflineNotSignedList(courseId);
					for(OfflineJoinMember member:notSignList){
						//发送短信
						response = client.sendMessage(member.getMobile(),msg.replace("#name#", member.getNickName()));
						String a = EntityUtils.toString(response.getEntity());
						org.json.JSONObject jsObject = new org.json.JSONObject(a);
						Map<String, Object> jsonMap = (Map<String, Object>) JSON.parse(jsObject.toString());
						if(!(jsonMap.get("success").toString().equals("true") || jsonMap.get("success").toString()=="true")){
							errStr.append(member.getMobile()).append(",");
						}
					}
				}else{
					notSignList = courseService.findOfflineNotSignedMobileList(courseId,sign);
					for(OfflineJoinMember member:notSignList){
						//发送短信
						response = client.sendMessage(member.getMobile(),msg.replace("#name#", member.getNickName()));
						String a = EntityUtils.toString(response.getEntity());
						org.json.JSONObject jsObject = new org.json.JSONObject(a);
						Map<String, Object> jsonMap = (Map<String, Object>) JSON.parse(jsObject.toString());
						if(!(jsonMap.get("success").toString().equals("true") || jsonMap.get("success").toString()=="true")){
							errStr.append(member.getMobile()).append(",");
						}
					}
				}
			}
			return status(200,errStr.toString());
		}catch(Exception e){
			e.printStackTrace();
			return error(APP_SYSTEM_ERROR);
		}
	}
}
